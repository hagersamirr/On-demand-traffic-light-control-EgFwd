
On-demand traffic project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000972  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000009e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000009e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013c9  00000000  00000000  00000b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ad  00000000  00000000  00001f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aa7  00000000  00000000  0000280a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  000032b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000520  00000000  00000000  000034d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005ca  00000000  00000000  000039f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003fc2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 99 01 	call	0x332	; 0x332 <main>
  74:	0c 94 b7 04 	jmp	0x96e	; 0x96e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <app_inits>:
 5- Initialize interrupt 0
 */
void app_inits(void)
{
		//// CAR_LEDS INITIALIZATIONSS
		LED_INIT(PORTA_ID,PIN0_ID);  // GREEN LED FOR CARS
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	0e 94 88 01 	call	0x310	; 0x310 <LED_INIT>
		LED_INIT(PORTA_ID,PIN1_ID);  // YELLOW LED FOR CARS
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	0e 94 88 01 	call	0x310	; 0x310 <LED_INIT>
		LED_INIT(PORTA_ID,PIN2_ID);  // RED LED FOR CARS
  8c:	62 e0       	ldi	r22, 0x02	; 2
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	0e 94 88 01 	call	0x310	; 0x310 <LED_INIT>
		
		//// PEDESTRIANS_LEDS INITIALIZATIONSS
		LED_INIT(PORTB_ID,PIN0_ID);  // GREEN LED FOR PEDESTRIANS
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	0e 94 88 01 	call	0x310	; 0x310 <LED_INIT>
		LED_INIT(PORTB_ID,PIN1_ID);  // YELLOW LED FOR PEDESTRIANS
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	0e 94 88 01 	call	0x310	; 0x310 <LED_INIT>
		LED_INIT(PORTB_ID,PIN2_ID);  // RED LED FOR PEDESTRIANS
  a4:	62 e0       	ldi	r22, 0x02	; 2
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	0e 94 88 01 	call	0x310	; 0x310 <LED_INIT>
		
		/////////LED_INIT(PORTA_ID,PIN6_ID); 
		
		//// PEDESTRIANS_Push_BUTTON INITIALIZATION
		BUTTON_INIT(PORTD_ID, PIN2_ID);
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	83 e0       	ldi	r24, 0x03	; 3
  b0:	0e 94 84 01 	call	0x308	; 0x308 <BUTTON_INIT>
		
		//// Timer 0 INITIALIZATION
		Timer0_Init();
  b4:	0e 94 c0 02 	call	0x580	; 0x580 <Timer0_Init>
		
		//// Interrupt 0 INITIALIZATION
		Interrupt0_init ();
  b8:	0e 94 b8 02 	call	0x570	; 0x570 <Interrupt0_init>
  bc:	08 95       	ret

000000be <Blinking_yellow>:
 * This function takes void and return void 
  it toggles the yellow leds of both cars and ped. every 500 ms for 5 
 */
void Blinking_yellow ()
{
	 Yellow_is_blinking = 1;
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	LED_TOGGLE(PORTA_ID,PIN1_ID);
  c4:	61 e0       	ldi	r22, 0x01	; 1
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	0e 94 94 01 	call	0x328	; 0x328 <LED_TOGGLE>
    LED_TOGGLE(PORTB_ID,PIN1_ID);  // YELLOW LED FOR PEDESTRIANS
  cc:	61 e0       	ldi	r22, 0x01	; 1
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	0e 94 94 01 	call	0x328	; 0x328 <LED_TOGGLE>
	Timer0_delay(500);
  d4:	84 ef       	ldi	r24, 0xF4	; 244
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	0e 94 c6 02 	call	0x58c	; 0x58c <Timer0_delay>
	LED_TOGGLE(PORTA_ID,PIN1_ID);
  dc:	61 e0       	ldi	r22, 0x01	; 1
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	0e 94 94 01 	call	0x328	; 0x328 <LED_TOGGLE>
	 LED_TOGGLE(PORTB_ID,PIN1_ID);  // YELLOW LED FOR PEDESTRIANS
  e4:	61 e0       	ldi	r22, 0x01	; 1
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	0e 94 94 01 	call	0x328	; 0x328 <LED_TOGGLE>
	Timer0_delay(500);
  ec:	84 ef       	ldi	r24, 0xF4	; 244
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	0e 94 c6 02 	call	0x58c	; 0x58c <Timer0_delay>
	LED_TOGGLE(PORTA_ID,PIN1_ID);
  f4:	61 e0       	ldi	r22, 0x01	; 1
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	0e 94 94 01 	call	0x328	; 0x328 <LED_TOGGLE>
	 LED_TOGGLE(PORTB_ID,PIN1_ID);   // YELLOW LED FOR PEDESTRIANS
  fc:	61 e0       	ldi	r22, 0x01	; 1
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	0e 94 94 01 	call	0x328	; 0x328 <LED_TOGGLE>
	Timer0_delay(1000);
 104:	88 ee       	ldi	r24, 0xE8	; 232
 106:	93 e0       	ldi	r25, 0x03	; 3
 108:	0e 94 c6 02 	call	0x58c	; 0x58c <Timer0_delay>
	LED_TOGGLE(PORTA_ID,PIN1_ID);
 10c:	61 e0       	ldi	r22, 0x01	; 1
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	0e 94 94 01 	call	0x328	; 0x328 <LED_TOGGLE>
	 LED_TOGGLE(PORTB_ID,PIN1_ID);   // YELLOW LED FOR PEDESTRIANS
 114:	61 e0       	ldi	r22, 0x01	; 1
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	0e 94 94 01 	call	0x328	; 0x328 <LED_TOGGLE>
	Timer0_delay(500);
 11c:	84 ef       	ldi	r24, 0xF4	; 244
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	0e 94 c6 02 	call	0x58c	; 0x58c <Timer0_delay>
	LED_TOGGLE(PORTA_ID,PIN1_ID);
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 94 01 	call	0x328	; 0x328 <LED_TOGGLE>
	 LED_TOGGLE(PORTB_ID,PIN1_ID); // YELLOW LED FOR PEDESTRIANS
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	0e 94 94 01 	call	0x328	; 0x328 <LED_TOGGLE>
	Timer0_delay(500);
 134:	84 ef       	ldi	r24, 0xF4	; 244
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	0e 94 c6 02 	call	0x58c	; 0x58c <Timer0_delay>
	LED_TOGGLE(PORTA_ID,PIN1_ID);
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	0e 94 94 01 	call	0x328	; 0x328 <LED_TOGGLE>
	 LED_TOGGLE(PORTB_ID,PIN1_ID);  // YELLOW LED FOR PEDESTRIANS
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	0e 94 94 01 	call	0x328	; 0x328 <LED_TOGGLE>
	Timer0_delay(1000);
 14c:	88 ee       	ldi	r24, 0xE8	; 232
 14e:	93 e0       	ldi	r25, 0x03	; 3
 150:	0e 94 c6 02 	call	0x58c	; 0x58c <Timer0_delay>
	LED_TOGGLE(PORTA_ID,PIN1_ID);
 154:	61 e0       	ldi	r22, 0x01	; 1
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	0e 94 94 01 	call	0x328	; 0x328 <LED_TOGGLE>
	 LED_TOGGLE(PORTB_ID,PIN1_ID);   // YELLOW LED FOR PEDESTRIANS
 15c:	61 e0       	ldi	r22, 0x01	; 1
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	0e 94 94 01 	call	0x328	; 0x328 <LED_TOGGLE>
	Timer0_delay(500);
 164:	84 ef       	ldi	r24, 0xF4	; 244
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	0e 94 c6 02 	call	0x58c	; 0x58c <Timer0_delay>
	LED_TOGGLE(PORTA_ID,PIN1_ID);
 16c:	61 e0       	ldi	r22, 0x01	; 1
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	0e 94 94 01 	call	0x328	; 0x328 <LED_TOGGLE>
	 LED_TOGGLE(PORTB_ID,PIN1_ID);  // YELLOW LED FOR PEDESTRIANS
 174:	61 e0       	ldi	r22, 0x01	; 1
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	0e 94 94 01 	call	0x328	; 0x328 <LED_TOGGLE>
	Timer0_delay(500);
 17c:	84 ef       	ldi	r24, 0xF4	; 244
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	0e 94 c6 02 	call	0x58c	; 0x58c <Timer0_delay>

	 Yellow_is_blinking = 0;
 184:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 188:	08 95       	ret

0000018a <app_start>:
// 	Timer0_delay(3000);
// 	LED_OFF(PORTA_ID,PIN6_ID);

// Green led for cars & Red led for ped. is on for five seconds

	LED_ON(PORTA_ID,PIN0_ID);  // GREEN LED FOR CARS
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	0e 94 8c 01 	call	0x318	; 0x318 <LED_ON>
	LED_ON(PORTB_ID,PIN2_ID);  // RED LED FOR PEDESTRIANS
 192:	62 e0       	ldi	r22, 0x02	; 2
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 8c 01 	call	0x318	; 0x318 <LED_ON>
	Timer0_delay(5000);
 19a:	88 e8       	ldi	r24, 0x88	; 136
 19c:	93 e1       	ldi	r25, 0x13	; 19
 19e:	0e 94 c6 02 	call	0x58c	; 0x58c <Timer0_delay>
	
// After 5 second  Green led for cars & Red led for ped. switched OFF 
// And yellow LEDs of both will blinking for five second
  
	LED_OFF(PORTA_ID,PIN0_ID);  // GREEN LED FOR CARS
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	0e 94 90 01 	call	0x320	; 0x320 <LED_OFF>
	LED_OFF(PORTB_ID,PIN2_ID);  // RED LED FOR PEDESTRIANS
 1aa:	62 e0       	ldi	r22, 0x02	; 2
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	0e 94 90 01 	call	0x320	; 0x320 <LED_OFF>
	Blinking_yellow ();
 1b2:	0e 94 5f 00 	call	0xbe	; 0xbe <Blinking_yellow>
	LED_OFF(PORTA_ID,PIN1_ID);  // YELLOW LED FOR CARS
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	0e 94 90 01 	call	0x320	; 0x320 <LED_OFF>
	LED_OFF(PORTB_ID,PIN1_ID);  // YELLOW LED FOR PEDESTRIANS
 1be:	61 e0       	ldi	r22, 0x01	; 1
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	0e 94 90 01 	call	0x320	; 0x320 <LED_OFF>
	
// After yellow blinking for 5 seconds 
// Red led for cars & green led for ped. is on for five seconds
// then yellow blinking again 

	LED_ON(PORTA_ID,PIN2_ID);  // RED LED FOR CARS
 1c6:	62 e0       	ldi	r22, 0x02	; 2
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	0e 94 8c 01 	call	0x318	; 0x318 <LED_ON>
	LED_ON(PORTB_ID,PIN0_ID);  // GREEN LED FOR PEDESTRIANS
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	0e 94 8c 01 	call	0x318	; 0x318 <LED_ON>
	Timer0_delay(5000);
 1d6:	88 e8       	ldi	r24, 0x88	; 136
 1d8:	93 e1       	ldi	r25, 0x13	; 19
 1da:	0e 94 c6 02 	call	0x58c	; 0x58c <Timer0_delay>
	LED_OFF(PORTA_ID,PIN2_ID); // RED LED FOR CARS
 1de:	62 e0       	ldi	r22, 0x02	; 2
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	0e 94 90 01 	call	0x320	; 0x320 <LED_OFF>
	LED_OFF(PORTB_ID,PIN0_ID);  // GREEN LED FOR PEDESTRIANS
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	0e 94 90 01 	call	0x320	; 0x320 <LED_OFF>
	
	Blinking_yellow ();
 1ee:	0e 94 5f 00 	call	0xbe	; 0xbe <Blinking_yellow>
	
	LED_OFF(PORTA_ID,PIN1_ID);  // YELLOW LED FOR CARS
 1f2:	61 e0       	ldi	r22, 0x01	; 1
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	0e 94 90 01 	call	0x320	; 0x320 <LED_OFF>
	LED_OFF(PORTB_ID,PIN1_ID);  // YELLOW LED FOR PEDESTRIANS
 1fa:	61 e0       	ldi	r22, 0x01	; 1
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	0e 94 90 01 	call	0x320	; 0x320 <LED_OFF>
 202:	08 95       	ret

00000204 <Allow_ped>:
{
	/*                  FIRST CASE 
	       If BUTTON is pressed when the cars' Red LED is on
	 the pedestrian's Green LED and the cars' Red LEDs will be on for five seconds
	*/ 
	if ( BIT_IS_SET(PINA,PIN2_ID) )  // check if the button is pressed when the cars' RED LED is on
 204:	ca 9b       	sbis	0x19, 2	; 25
 206:	0d c0       	rjmp	.+26     	; 0x222 <Allow_ped+0x1e>
	 {   LED_ON(PORTA_ID,PIN2_ID);  // RED LED FOR CARS
 208:	62 e0       	ldi	r22, 0x02	; 2
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	0e 94 8c 01 	call	0x318	; 0x318 <LED_ON>
		 LED_ON(PORTB_ID,PIN0_ID);  // GREEN LED FOR PEDESTRIANS
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	0e 94 8c 01 	call	0x318	; 0x318 <LED_ON>
	   	Timer0_delay(5000);	   
 218:	88 e8       	ldi	r24, 0x88	; 136
 21a:	93 e1       	ldi	r25, 0x13	; 19
 21c:	0e 94 c6 02 	call	0x58c	; 0x58c <Timer0_delay>
 220:	28 c0       	rjmp	.+80     	; 0x272 <Allow_ped+0x6e>
	 }
	 /*                  SECOND CASE 
	      If BUTTON is pressed when the cars' Green LED is on or the cars' Yellow LED is blinking,
	*/ 
	 else if ( BIT_IS_SET(PINA,PIN0_ID) ||   Yellow_is_blinking ==1) 
 222:	c8 99       	sbic	0x19, 0	; 25
 224:	04 c0       	rjmp	.+8      	; 0x22e <Allow_ped+0x2a>
 226:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 22a:	81 30       	cpi	r24, 0x01	; 1
 22c:	11 f5       	brne	.+68     	; 0x272 <Allow_ped+0x6e>
	 {   
  // the pedestrian Red LED will be on 
		 LED_OFF(PORTA_ID,PIN0_ID);  // GREEN LED FOR CARS
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	0e 94 90 01 	call	0x320	; 0x320 <LED_OFF>
		 LED_ON(PORTB_ID,PIN2_ID);  // RED LED FOR PEDESTRIANS
 236:	62 e0       	ldi	r22, 0x02	; 2
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	0e 94 8c 01 	call	0x318	; 0x318 <LED_ON>
// then both Yellow LEDs start to blink for five seconds,
	    	Blinking_yellow ();
 23e:	0e 94 5f 00 	call	0xbe	; 0xbe <Blinking_yellow>
		 LED_OFF(PORTA_ID,PIN1_ID);  // YELLOW LED FOR CARS
 242:	61 e0       	ldi	r22, 0x01	; 1
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	0e 94 90 01 	call	0x320	; 0x320 <LED_OFF>
		 LED_OFF(PORTB_ID,PIN1_ID);  // YELLOW LED FOR PEDESTRIANS
 24a:	61 e0       	ldi	r22, 0x01	; 1
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	0e 94 90 01 	call	0x320	; 0x320 <LED_OFF>
		  LED_OFF(PORTB_ID,PIN2_ID);  // RED LED FOR PEDESTRIANS
 252:	62 e0       	ldi	r22, 0x02	; 2
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	0e 94 90 01 	call	0x320	; 0x320 <LED_OFF>
// then the cars' Red LED and pedestrian Green LEDs are on for five seconds,
		 LED_ON(PORTA_ID,PIN2_ID);  // RED LED FOR CARS
 25a:	62 e0       	ldi	r22, 0x02	; 2
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	0e 94 8c 01 	call	0x318	; 0x318 <LED_ON>
		 LED_ON(PORTB_ID,PIN0_ID);  // GREEN LED FOR PEDESTRIANS
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	0e 94 8c 01 	call	0x318	; 0x318 <LED_ON>
		  Timer0_delay(5000);
 26a:	88 e8       	ldi	r24, 0x88	; 136
 26c:	93 e1       	ldi	r25, 0x13	; 19
 26e:	0e 94 c6 02 	call	0x58c	; 0x58c <Timer0_delay>
	 }
// 	 -------------->>>>>>> At the end of the two states  <<<<<<------------------

// 	 the cars' Red LED will be off and both Yellow LEDs start blinking for 5 seconds
// 	 and the pedestrian's Green LED is still on
	  LED_OFF(PORTA_ID,PIN2_ID);  // RED LED FOR CARS
 272:	62 e0       	ldi	r22, 0x02	; 2
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	0e 94 90 01 	call	0x320	; 0x320 <LED_OFF>
		Blinking_yellow ();
 27a:	0e 94 5f 00 	call	0xbe	; 0xbe <Blinking_yellow>
	  LED_OFF(PORTA_ID,PIN1_ID);  // YELLOW LED FOR CARS
 27e:	61 e0       	ldi	r22, 0x01	; 1
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	0e 94 90 01 	call	0x320	; 0x320 <LED_OFF>
	  LED_OFF(PORTB_ID,PIN1_ID);  // YELLOW LED FOR PEDESTRIANS
 286:	61 e0       	ldi	r22, 0x01	; 1
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	0e 94 90 01 	call	0x320	; 0x320 <LED_OFF>
	  
//   After 5 seconds the pedestrian Green LED will be off 
//   and both the pedestrian Red LED and the cars' Green LED will be on.
	  LED_OFF(PORTB_ID,PIN0_ID);  // GREEN LED FOR PEDESTRIANS
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	0e 94 90 01 	call	0x320	; 0x320 <LED_OFF>
	  
	  LED_ON(PORTA_ID,PIN0_ID);  // GREEN LED FOR CARS
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	0e 94 8c 01 	call	0x318	; 0x318 <LED_ON>
	  LED_ON(PORTB_ID,PIN2_ID);  // RED LED FOR PEDESTRIANS
 29e:	62 e0       	ldi	r22, 0x02	; 2
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	0e 94 8c 01 	call	0x318	; 0x318 <LED_ON>
	  Timer0_delay(5000);
 2a6:	88 e8       	ldi	r24, 0x88	; 136
 2a8:	93 e1       	ldi	r25, 0x13	; 19
 2aa:	0e 94 c6 02 	call	0x58c	; 0x58c <Timer0_delay>
	  LED_OFF(PORTA_ID,PIN0_ID);  // GREEN LED FOR CARS
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	0e 94 90 01 	call	0x320	; 0x320 <LED_OFF>
	  LED_OFF(PORTB_ID,PIN2_ID);  // RED LED FOR PEDESTRIANS
 2b6:	62 e0       	ldi	r22, 0x02	; 2
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	0e 94 90 01 	call	0x320	; 0x320 <LED_OFF>
 2be:	08 95       	ret

000002c0 <__vector_1>:
// 		Timer0_delay(3000);
// 		LED_OFF(PORTA_ID,PIN6_ID);
}

ISR (INT0_vect)
{
 2c0:	1f 92       	push	r1
 2c2:	0f 92       	push	r0
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	0f 92       	push	r0
 2c8:	11 24       	eor	r1, r1
 2ca:	2f 93       	push	r18
 2cc:	3f 93       	push	r19
 2ce:	4f 93       	push	r20
 2d0:	5f 93       	push	r21
 2d2:	6f 93       	push	r22
 2d4:	7f 93       	push	r23
 2d6:	8f 93       	push	r24
 2d8:	9f 93       	push	r25
 2da:	af 93       	push	r26
 2dc:	bf 93       	push	r27
 2de:	ef 93       	push	r30
 2e0:	ff 93       	push	r31
	Allow_ped ();
 2e2:	0e 94 02 01 	call	0x204	; 0x204 <Allow_ped>
	
}
 2e6:	ff 91       	pop	r31
 2e8:	ef 91       	pop	r30
 2ea:	bf 91       	pop	r27
 2ec:	af 91       	pop	r26
 2ee:	9f 91       	pop	r25
 2f0:	8f 91       	pop	r24
 2f2:	7f 91       	pop	r23
 2f4:	6f 91       	pop	r22
 2f6:	5f 91       	pop	r21
 2f8:	4f 91       	pop	r20
 2fa:	3f 91       	pop	r19
 2fc:	2f 91       	pop	r18
 2fe:	0f 90       	pop	r0
 300:	0f be       	out	0x3f, r0	; 63
 302:	0f 90       	pop	r0
 304:	1f 90       	pop	r1
 306:	18 95       	reti

00000308 <BUTTON_INIT>:
 * This function takes the button PORT and pin  
 * Setup the direction of the Button pin as an input.
 */
void BUTTON_INIT(uint8_t ButtonPort, uint8_t ButtonPin)
{
	DIO_setPinDirection (ButtonPort, ButtonPin, PIN_INPUT);
 308:	40 e0       	ldi	r20, 0x00	; 0
 30a:	0e 94 9e 01 	call	0x33c	; 0x33c <DIO_setPinDirection>
 30e:	08 95       	ret

00000310 <LED_INIT>:
 * This function takes the LED PORT and pin  
 * Setup the direction of the led pin as an output.
 */
void LED_INIT (uint8_t LED_PORT , uint8_t LED_PIN)
{
	DIO_setPinDirection( LED_PORT, LED_PIN, PIN_OUTPUT );
 310:	41 e0       	ldi	r20, 0x01	; 1
 312:	0e 94 9e 01 	call	0x33c	; 0x33c <DIO_setPinDirection>
 316:	08 95       	ret

00000318 <LED_ON>:
 * This function takes the LED PORT and pin 
 * Write the value Logic High on the required led pin.
 */
void LED_ON (uint8_t LED_PORT , uint8_t LED_PIN)
{
	DIO_writePin( LED_PORT, LED_PIN, LOGIC_HIGH );
 318:	41 e0       	ldi	r20, 0x01	; 1
 31a:	0e 94 11 02 	call	0x422	; 0x422 <DIO_writePin>
 31e:	08 95       	ret

00000320 <LED_OFF>:
 * This function takes the LED PORT and pin 
 * Write the value Logic LOW on the required led pin.
 */
void LED_OFF (uint8_t LED_PORT , uint8_t LED_PIN)
{
	DIO_writePin( LED_PORT, LED_PIN, LOGIC_LOW );
 320:	40 e0       	ldi	r20, 0x00	; 0
 322:	0e 94 11 02 	call	0x422	; 0x422 <DIO_writePin>
 326:	08 95       	ret

00000328 <LED_TOGGLE>:
 * This function takes the LED PORT and pin 
 * change the state of the required pin (toggle it )
 */
void LED_TOGGLE (uint8_t LED_PORT , uint8_t LED_PIN)
{
		DIO_toggle(LED_PORT,LED_PIN);
 328:	70 e0       	ldi	r23, 0x00	; 0
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 84 02 	call	0x508	; 0x508 <DIO_toggle>
 330:	08 95       	ret

00000332 <main>:


int main (void)
{
	
app_inits();
 332:	0e 94 3e 00 	call	0x7c	; 0x7c <app_inits>
 while(1)
 {
 	app_start();
 336:	0e 94 c5 00 	call	0x18a	; 0x18a <app_start>
 33a:	fd cf       	rjmp	.-6      	; 0x336 <main+0x4>

0000033c <DIO_setPinDirection>:
				* value=LOGIC_HIGH;
			//	return  value	;
			}
			else
			{
				 * value= LOGIC_LOW;
 33c:	68 30       	cpi	r22, 0x08	; 8
 33e:	08 f0       	brcs	.+2      	; 0x342 <DIO_setPinDirection+0x6>
 340:	6f c0       	rjmp	.+222    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 342:	84 30       	cpi	r24, 0x04	; 4
 344:	08 f0       	brcs	.+2      	; 0x348 <DIO_setPinDirection+0xc>
 346:	6c c0       	rjmp	.+216    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 348:	81 30       	cpi	r24, 0x01	; 1
 34a:	01 f1       	breq	.+64     	; 0x38c <DIO_setPinDirection+0x50>
 34c:	30 f0       	brcs	.+12     	; 0x35a <DIO_setPinDirection+0x1e>
 34e:	82 30       	cpi	r24, 0x02	; 2
 350:	b1 f1       	breq	.+108    	; 0x3be <DIO_setPinDirection+0x82>
 352:	83 30       	cpi	r24, 0x03	; 3
 354:	09 f4       	brne	.+2      	; 0x358 <DIO_setPinDirection+0x1c>
 356:	4c c0       	rjmp	.+152    	; 0x3f0 <DIO_setPinDirection+0xb4>
 358:	08 95       	ret
 35a:	41 30       	cpi	r20, 0x01	; 1
 35c:	59 f4       	brne	.+22     	; 0x374 <DIO_setPinDirection+0x38>
 35e:	2a b3       	in	r18, 0x1a	; 26
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	02 c0       	rjmp	.+4      	; 0x36a <DIO_setPinDirection+0x2e>
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	6a 95       	dec	r22
 36c:	e2 f7       	brpl	.-8      	; 0x366 <DIO_setPinDirection+0x2a>
 36e:	82 2b       	or	r24, r18
 370:	8a bb       	out	0x1a, r24	; 26
 372:	08 95       	ret
 374:	2a b3       	in	r18, 0x1a	; 26
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	02 c0       	rjmp	.+4      	; 0x380 <DIO_setPinDirection+0x44>
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	6a 95       	dec	r22
 382:	e2 f7       	brpl	.-8      	; 0x37c <DIO_setPinDirection+0x40>
 384:	80 95       	com	r24
 386:	82 23       	and	r24, r18
 388:	8a bb       	out	0x1a, r24	; 26
 38a:	08 95       	ret
 38c:	41 30       	cpi	r20, 0x01	; 1
 38e:	59 f4       	brne	.+22     	; 0x3a6 <DIO_setPinDirection+0x6a>
 390:	27 b3       	in	r18, 0x17	; 23
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_setPinDirection+0x60>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	6a 95       	dec	r22
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_setPinDirection+0x5c>
 3a0:	82 2b       	or	r24, r18
 3a2:	87 bb       	out	0x17, r24	; 23
 3a4:	08 95       	ret
 3a6:	27 b3       	in	r18, 0x17	; 23
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_setPinDirection+0x76>
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	6a 95       	dec	r22
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_setPinDirection+0x72>
 3b6:	80 95       	com	r24
 3b8:	82 23       	and	r24, r18
 3ba:	87 bb       	out	0x17, r24	; 23
 3bc:	08 95       	ret
 3be:	41 30       	cpi	r20, 0x01	; 1
 3c0:	59 f4       	brne	.+22     	; 0x3d8 <DIO_setPinDirection+0x9c>
 3c2:	24 b3       	in	r18, 0x14	; 20
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <DIO_setPinDirection+0x92>
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	6a 95       	dec	r22
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <DIO_setPinDirection+0x8e>
 3d2:	82 2b       	or	r24, r18
 3d4:	84 bb       	out	0x14, r24	; 20
 3d6:	08 95       	ret
 3d8:	24 b3       	in	r18, 0x14	; 20
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <DIO_setPinDirection+0xa8>
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	6a 95       	dec	r22
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <DIO_setPinDirection+0xa4>
 3e8:	80 95       	com	r24
 3ea:	82 23       	and	r24, r18
 3ec:	84 bb       	out	0x14, r24	; 20
 3ee:	08 95       	ret
 3f0:	41 30       	cpi	r20, 0x01	; 1
 3f2:	59 f4       	brne	.+22     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3f4:	21 b3       	in	r18, 0x11	; 17
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	6a 95       	dec	r22
 402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_setPinDirection+0xc0>
 404:	82 2b       	or	r24, r18
 406:	81 bb       	out	0x11, r24	; 17
 408:	08 95       	ret
 40a:	21 b3       	in	r18, 0x11	; 17
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	02 c0       	rjmp	.+4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 412:	88 0f       	add	r24, r24
 414:	99 1f       	adc	r25, r25
 416:	6a 95       	dec	r22
 418:	e2 f7       	brpl	.-8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 41a:	80 95       	com	r24
 41c:	82 23       	and	r24, r18
 41e:	81 bb       	out	0x11, r24	; 17
 420:	08 95       	ret

00000422 <DIO_writePin>:
 422:	68 30       	cpi	r22, 0x08	; 8
 424:	08 f0       	brcs	.+2      	; 0x428 <DIO_writePin+0x6>
 426:	6f c0       	rjmp	.+222    	; 0x506 <DIO_writePin+0xe4>
 428:	84 30       	cpi	r24, 0x04	; 4
 42a:	08 f0       	brcs	.+2      	; 0x42e <DIO_writePin+0xc>
 42c:	6c c0       	rjmp	.+216    	; 0x506 <DIO_writePin+0xe4>
 42e:	81 30       	cpi	r24, 0x01	; 1
 430:	01 f1       	breq	.+64     	; 0x472 <DIO_writePin+0x50>
 432:	30 f0       	brcs	.+12     	; 0x440 <DIO_writePin+0x1e>
 434:	82 30       	cpi	r24, 0x02	; 2
 436:	b1 f1       	breq	.+108    	; 0x4a4 <DIO_writePin+0x82>
 438:	83 30       	cpi	r24, 0x03	; 3
 43a:	09 f4       	brne	.+2      	; 0x43e <DIO_writePin+0x1c>
 43c:	4c c0       	rjmp	.+152    	; 0x4d6 <DIO_writePin+0xb4>
 43e:	08 95       	ret
 440:	41 30       	cpi	r20, 0x01	; 1
 442:	59 f4       	brne	.+22     	; 0x45a <DIO_writePin+0x38>
 444:	2b b3       	in	r18, 0x1b	; 27
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	02 c0       	rjmp	.+4      	; 0x450 <DIO_writePin+0x2e>
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	6a 95       	dec	r22
 452:	e2 f7       	brpl	.-8      	; 0x44c <DIO_writePin+0x2a>
 454:	82 2b       	or	r24, r18
 456:	8b bb       	out	0x1b, r24	; 27
 458:	08 95       	ret
 45a:	2b b3       	in	r18, 0x1b	; 27
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	02 c0       	rjmp	.+4      	; 0x466 <DIO_writePin+0x44>
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	6a 95       	dec	r22
 468:	e2 f7       	brpl	.-8      	; 0x462 <DIO_writePin+0x40>
 46a:	80 95       	com	r24
 46c:	82 23       	and	r24, r18
 46e:	8b bb       	out	0x1b, r24	; 27
 470:	08 95       	ret
 472:	41 30       	cpi	r20, 0x01	; 1
 474:	59 f4       	brne	.+22     	; 0x48c <DIO_writePin+0x6a>
 476:	28 b3       	in	r18, 0x18	; 24
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	02 c0       	rjmp	.+4      	; 0x482 <DIO_writePin+0x60>
 47e:	88 0f       	add	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	6a 95       	dec	r22
 484:	e2 f7       	brpl	.-8      	; 0x47e <DIO_writePin+0x5c>
 486:	82 2b       	or	r24, r18
 488:	88 bb       	out	0x18, r24	; 24
 48a:	08 95       	ret
 48c:	28 b3       	in	r18, 0x18	; 24
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	02 c0       	rjmp	.+4      	; 0x498 <DIO_writePin+0x76>
 494:	88 0f       	add	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	6a 95       	dec	r22
 49a:	e2 f7       	brpl	.-8      	; 0x494 <DIO_writePin+0x72>
 49c:	80 95       	com	r24
 49e:	82 23       	and	r24, r18
 4a0:	88 bb       	out	0x18, r24	; 24
 4a2:	08 95       	ret
 4a4:	41 30       	cpi	r20, 0x01	; 1
 4a6:	59 f4       	brne	.+22     	; 0x4be <DIO_writePin+0x9c>
 4a8:	25 b3       	in	r18, 0x15	; 21
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_writePin+0x92>
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	6a 95       	dec	r22
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_writePin+0x8e>
 4b8:	82 2b       	or	r24, r18
 4ba:	85 bb       	out	0x15, r24	; 21
 4bc:	08 95       	ret
 4be:	25 b3       	in	r18, 0x15	; 21
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <DIO_writePin+0xa8>
 4c6:	88 0f       	add	r24, r24
 4c8:	99 1f       	adc	r25, r25
 4ca:	6a 95       	dec	r22
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <DIO_writePin+0xa4>
 4ce:	80 95       	com	r24
 4d0:	82 23       	and	r24, r18
 4d2:	85 bb       	out	0x15, r24	; 21
 4d4:	08 95       	ret
 4d6:	41 30       	cpi	r20, 0x01	; 1
 4d8:	59 f4       	brne	.+22     	; 0x4f0 <DIO_writePin+0xce>
 4da:	22 b3       	in	r18, 0x12	; 18
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <DIO_writePin+0xc4>
 4e2:	88 0f       	add	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	6a 95       	dec	r22
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <DIO_writePin+0xc0>
 4ea:	82 2b       	or	r24, r18
 4ec:	82 bb       	out	0x12, r24	; 18
 4ee:	08 95       	ret
 4f0:	22 b3       	in	r18, 0x12	; 18
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <DIO_writePin+0xda>
 4f8:	88 0f       	add	r24, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	6a 95       	dec	r22
 4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <DIO_writePin+0xd6>
 500:	80 95       	com	r24
 502:	82 23       	and	r24, r18
 504:	82 bb       	out	0x12, r24	; 18
 506:	08 95       	ret

00000508 <DIO_toggle>:
	//return value;
}

void DIO_toggle(uint8_t portNumber, uint8_t pinNumber)
{
	switch(portNumber){
 508:	81 30       	cpi	r24, 0x01	; 1
 50a:	89 f0       	breq	.+34     	; 0x52e <DIO_toggle+0x26>
 50c:	28 f0       	brcs	.+10     	; 0x518 <DIO_toggle+0x10>
 50e:	82 30       	cpi	r24, 0x02	; 2
 510:	c9 f0       	breq	.+50     	; 0x544 <DIO_toggle+0x3c>
 512:	83 30       	cpi	r24, 0x03	; 3
 514:	11 f1       	breq	.+68     	; 0x55a <DIO_toggle+0x52>
 516:	08 95       	ret
		case PORTA_ID:
		TOGGLE_BIT(PORTA,pinNumber);
 518:	2b b3       	in	r18, 0x1b	; 27
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	02 c0       	rjmp	.+4      	; 0x524 <DIO_toggle+0x1c>
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	6a 95       	dec	r22
 526:	e2 f7       	brpl	.-8      	; 0x520 <DIO_toggle+0x18>
 528:	82 27       	eor	r24, r18
 52a:	8b bb       	out	0x1b, r24	; 27
		break;
 52c:	08 95       	ret
		case PORTB_ID:
		TOGGLE_BIT(PORTB,pinNumber);
 52e:	28 b3       	in	r18, 0x18	; 24
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	02 c0       	rjmp	.+4      	; 0x53a <DIO_toggle+0x32>
 536:	88 0f       	add	r24, r24
 538:	99 1f       	adc	r25, r25
 53a:	6a 95       	dec	r22
 53c:	e2 f7       	brpl	.-8      	; 0x536 <DIO_toggle+0x2e>
 53e:	82 27       	eor	r24, r18
 540:	88 bb       	out	0x18, r24	; 24
		break;
 542:	08 95       	ret
		case PORTC_ID:
		TOGGLE_BIT(PORTC,pinNumber);
 544:	25 b3       	in	r18, 0x15	; 21
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	02 c0       	rjmp	.+4      	; 0x550 <DIO_toggle+0x48>
 54c:	88 0f       	add	r24, r24
 54e:	99 1f       	adc	r25, r25
 550:	6a 95       	dec	r22
 552:	e2 f7       	brpl	.-8      	; 0x54c <DIO_toggle+0x44>
 554:	82 27       	eor	r24, r18
 556:	85 bb       	out	0x15, r24	; 21
		break;
 558:	08 95       	ret
		case PORTD_ID:
		TOGGLE_BIT(PORTD,pinNumber);
 55a:	22 b3       	in	r18, 0x12	; 18
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	02 c0       	rjmp	.+4      	; 0x566 <DIO_toggle+0x5e>
 562:	88 0f       	add	r24, r24
 564:	99 1f       	adc	r25, r25
 566:	6a 95       	dec	r22
 568:	e2 f7       	brpl	.-8      	; 0x562 <DIO_toggle+0x5a>
 56a:	82 27       	eor	r24, r18
 56c:	82 bb       	out	0x12, r24	; 18
 56e:	08 95       	ret

00000570 <Interrupt0_init>:
*/

void Interrupt0_init ()
{
	// enable global interrupt -> by setting bit 7 in sreg to 1 or sei
	sei();
 570:	78 94       	sei
	// choose the external interrupt sense -> rising edge here
	MCUCR |= (1 << ISC00)| (1 << ISC01);
 572:	85 b7       	in	r24, 0x35	; 53
 574:	83 60       	ori	r24, 0x03	; 3
 576:	85 bf       	out	0x35, r24	; 53

	// enable external interrupt 0 -> INT0
	GICR |= ( 1 << INT0 );
 578:	8b b7       	in	r24, 0x3b	; 59
 57a:	80 64       	ori	r24, 0x40	; 64
 57c:	8b bf       	out	0x3b, r24	; 59
 57e:	08 95       	ret

00000580 <Timer0_Init>:
 //3) setting timer prescaler 
 */
void Timer0_Init()
{ 
 // choose timer mode
 TCCR0 =0x00;     // normal mode
 580:	13 be       	out	0x33, r1	; 51
 // timer set initial value
 TCNT0 =0X00; // 
 582:	12 be       	out	0x32, r1	; 50
// while(1){
 //start timer -> by setting prescaler value 1024
 TCCR0 |= (1<<0) | (1<<2);
 584:	83 b7       	in	r24, 0x33	; 51
 586:	85 60       	ori	r24, 0x05	; 5
 588:	83 bf       	out	0x33, r24	; 51
 58a:	08 95       	ret

0000058c <Timer0_delay>:
 // calculate tick time 
 // and max delay for this timer 
 // and check for three cases to calculate timer initial value and no. of over flows needed 
 */
void Timer0_delay(int Time_delay)
{
 58c:	cf 92       	push	r12
 58e:	df 92       	push	r13
 590:	ef 92       	push	r14
 592:	ff 92       	push	r15
 594:	cf 93       	push	r28
 596:	df 93       	push	r29
 598:	ec 01       	movw	r28, r24
//T_tick= prescaler/ CPU frequency
T_tick = 1024.0 / 1000.0; // milLi second
// Tmaxdelay = Ttick * 2^n -> 8-bit timer
T_maxdelay = T_tick * 256; // milli seconds
////////// FIRST CASE //////////////
if(Time_delay<T_maxdelay)
 59a:	bc 01       	movw	r22, r24
 59c:	99 0f       	add	r25, r25
 59e:	88 0b       	sbc	r24, r24
 5a0:	99 0b       	sbc	r25, r25
 5a2:	0e 94 c6 03 	call	0x78c	; 0x78c <__floatsisf>
 5a6:	6b 01       	movw	r12, r22
 5a8:	7c 01       	movw	r14, r24
 5aa:	2f e6       	ldi	r18, 0x6F	; 111
 5ac:	32 e1       	ldi	r19, 0x12	; 18
 5ae:	43 e8       	ldi	r20, 0x83	; 131
 5b0:	53 e4       	ldi	r21, 0x43	; 67
 5b2:	0e 94 1e 03 	call	0x63c	; 0x63c <__cmpsf2>
 5b6:	88 23       	and	r24, r24
 5b8:	84 f0       	brlt	.+32     	; 0x5da <Timer0_delay+0x4e>
	InitialTimerValue = (T_maxdelay-Time_delay)/T_tick;
	Number_of_OVERFLOWs = 1;
	
}
////////// SECOND CASE //////////////
else if(Time_delay == (int)T_maxdelay)
 5ba:	c6 30       	cpi	r28, 0x06	; 6
 5bc:	d1 40       	sbci	r29, 0x01	; 1
 5be:	81 f0       	breq	.+32     	; 0x5e0 <Timer0_delay+0x54>
	Number_of_OVERFLOWs=1;
}
////////// THIRD CASE //////////////
else
{
	Number_of_OVERFLOWs = ceil((double)Time_delay/T_maxdelay);
 5c0:	2f e6       	ldi	r18, 0x6F	; 111
 5c2:	32 e1       	ldi	r19, 0x12	; 18
 5c4:	43 e8       	ldi	r20, 0x83	; 131
 5c6:	53 e4       	ldi	r21, 0x43	; 67
 5c8:	c7 01       	movw	r24, r14
 5ca:	b6 01       	movw	r22, r12
 5cc:	0e 94 23 03 	call	0x646	; 0x646 <__divsf3>
 5d0:	0e 94 07 03 	call	0x60e	; 0x60e <ceil>
 5d4:	0e 94 95 03 	call	0x72a	; 0x72a <__fixunssfsi>
 5d8:	05 c0       	rjmp	.+10     	; 0x5e4 <Timer0_delay+0x58>
T_maxdelay = T_tick * 256; // milli seconds
////////// FIRST CASE //////////////
if(Time_delay<T_maxdelay)
{
	InitialTimerValue = (T_maxdelay-Time_delay)/T_tick;
	Number_of_OVERFLOWs = 1;
 5da:	61 e0       	ldi	r22, 0x01	; 1
 5dc:	70 e0       	ldi	r23, 0x00	; 0
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <Timer0_delay+0x58>
}
////////// SECOND CASE //////////////
else if(Time_delay == (int)T_maxdelay)
{
	InitialTimerValue=0;
	Number_of_OVERFLOWs=1;
 5e0:	61 e0       	ldi	r22, 0x01	; 1
 5e2:	70 e0       	ldi	r23, 0x00	; 0
T_maxdelay = T_tick * 256; // milli seconds
////////// FIRST CASE //////////////
if(Time_delay<T_maxdelay)
{
	InitialTimerValue = (T_maxdelay-Time_delay)/T_tick;
	Number_of_OVERFLOWs = 1;
 5e4:	20 e0       	ldi	r18, 0x00	; 0
 5e6:	30 e0       	ldi	r19, 0x00	; 0
 5e8:	08 c0       	rjmp	.+16     	; 0x5fa <Timer0_delay+0x6e>
	InitialTimerValue = 256 - ((double)Time_delay/T_tick)/Number_of_OVERFLOWs;
	
}
/////// busy waiting for over flow flag 
while (overflowCounter < Number_of_OVERFLOWs){
		while (( TIFR & (1<<0) )==0 )
 5ea:	08 b6       	in	r0, 0x38	; 56
 5ec:	00 fe       	sbrs	r0, 0
 5ee:	fd cf       	rjmp	.-6      	; 0x5ea <Timer0_delay+0x5e>
		{
			//	 wait for the flag
		}
		//clear the overflow flag
	          	TIFR |= (1<<0);
 5f0:	88 b7       	in	r24, 0x38	; 56
 5f2:	81 60       	ori	r24, 0x01	; 1
 5f4:	88 bf       	out	0x38, r24	; 56
		overflowCounter++;
 5f6:	2f 5f       	subi	r18, 0xFF	; 255
 5f8:	3f 4f       	sbci	r19, 0xFF	; 255
	Number_of_OVERFLOWs = ceil((double)Time_delay/T_maxdelay);
	InitialTimerValue = 256 - ((double)Time_delay/T_tick)/Number_of_OVERFLOWs;
	
}
/////// busy waiting for over flow flag 
while (overflowCounter < Number_of_OVERFLOWs){
 5fa:	26 17       	cp	r18, r22
 5fc:	37 07       	cpc	r19, r23
 5fe:	a8 f3       	brcs	.-22     	; 0x5ea <Timer0_delay+0x5e>
	overflowCounter =0;
	// delay 5000 ms
	// wait until the overflow flag to be set
	// timer stop
	//TCCR0 = 0x00;
}
 600:	df 91       	pop	r29
 602:	cf 91       	pop	r28
 604:	ff 90       	pop	r15
 606:	ef 90       	pop	r14
 608:	df 90       	pop	r13
 60a:	cf 90       	pop	r12
 60c:	08 95       	ret

0000060e <ceil>:
 60e:	0e 94 98 04 	call	0x930	; 0x930 <__fp_trunc>
 612:	90 f0       	brcs	.+36     	; 0x638 <ceil+0x2a>
 614:	9f 37       	cpi	r25, 0x7F	; 127
 616:	48 f4       	brcc	.+18     	; 0x62a <ceil+0x1c>
 618:	91 11       	cpse	r25, r1
 61a:	16 f4       	brtc	.+4      	; 0x620 <ceil+0x12>
 61c:	0c 94 b1 04 	jmp	0x962	; 0x962 <__fp_szero>
 620:	60 e0       	ldi	r22, 0x00	; 0
 622:	70 e0       	ldi	r23, 0x00	; 0
 624:	80 e8       	ldi	r24, 0x80	; 128
 626:	9f e3       	ldi	r25, 0x3F	; 63
 628:	08 95       	ret
 62a:	26 f0       	brts	.+8      	; 0x634 <ceil+0x26>
 62c:	1b 16       	cp	r1, r27
 62e:	61 1d       	adc	r22, r1
 630:	71 1d       	adc	r23, r1
 632:	81 1d       	adc	r24, r1
 634:	0c 94 2b 04 	jmp	0x856	; 0x856 <__fp_mintl>
 638:	0c 94 46 04 	jmp	0x88c	; 0x88c <__fp_mpack>

0000063c <__cmpsf2>:
 63c:	0e 94 01 04 	call	0x802	; 0x802 <__fp_cmp>
 640:	08 f4       	brcc	.+2      	; 0x644 <__cmpsf2+0x8>
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	08 95       	ret

00000646 <__divsf3>:
 646:	0e 94 37 03 	call	0x66e	; 0x66e <__divsf3x>
 64a:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <__fp_round>
 64e:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__fp_pscB>
 652:	58 f0       	brcs	.+22     	; 0x66a <__divsf3+0x24>
 654:	0e 94 57 04 	call	0x8ae	; 0x8ae <__fp_pscA>
 658:	40 f0       	brcs	.+16     	; 0x66a <__divsf3+0x24>
 65a:	29 f4       	brne	.+10     	; 0x666 <__divsf3+0x20>
 65c:	5f 3f       	cpi	r21, 0xFF	; 255
 65e:	29 f0       	breq	.+10     	; 0x66a <__divsf3+0x24>
 660:	0c 94 25 04 	jmp	0x84a	; 0x84a <__fp_inf>
 664:	51 11       	cpse	r21, r1
 666:	0c 94 b1 04 	jmp	0x962	; 0x962 <__fp_szero>
 66a:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__fp_nan>

0000066e <__divsf3x>:
 66e:	0e 94 76 04 	call	0x8ec	; 0x8ec <__fp_split3>
 672:	68 f3       	brcs	.-38     	; 0x64e <__divsf3+0x8>

00000674 <__divsf3_pse>:
 674:	99 23       	and	r25, r25
 676:	b1 f3       	breq	.-20     	; 0x664 <__divsf3+0x1e>
 678:	55 23       	and	r21, r21
 67a:	91 f3       	breq	.-28     	; 0x660 <__divsf3+0x1a>
 67c:	95 1b       	sub	r25, r21
 67e:	55 0b       	sbc	r21, r21
 680:	bb 27       	eor	r27, r27
 682:	aa 27       	eor	r26, r26
 684:	62 17       	cp	r22, r18
 686:	73 07       	cpc	r23, r19
 688:	84 07       	cpc	r24, r20
 68a:	38 f0       	brcs	.+14     	; 0x69a <__divsf3_pse+0x26>
 68c:	9f 5f       	subi	r25, 0xFF	; 255
 68e:	5f 4f       	sbci	r21, 0xFF	; 255
 690:	22 0f       	add	r18, r18
 692:	33 1f       	adc	r19, r19
 694:	44 1f       	adc	r20, r20
 696:	aa 1f       	adc	r26, r26
 698:	a9 f3       	breq	.-22     	; 0x684 <__divsf3_pse+0x10>
 69a:	35 d0       	rcall	.+106    	; 0x706 <__divsf3_pse+0x92>
 69c:	0e 2e       	mov	r0, r30
 69e:	3a f0       	brmi	.+14     	; 0x6ae <__divsf3_pse+0x3a>
 6a0:	e0 e8       	ldi	r30, 0x80	; 128
 6a2:	32 d0       	rcall	.+100    	; 0x708 <__divsf3_pse+0x94>
 6a4:	91 50       	subi	r25, 0x01	; 1
 6a6:	50 40       	sbci	r21, 0x00	; 0
 6a8:	e6 95       	lsr	r30
 6aa:	00 1c       	adc	r0, r0
 6ac:	ca f7       	brpl	.-14     	; 0x6a0 <__divsf3_pse+0x2c>
 6ae:	2b d0       	rcall	.+86     	; 0x706 <__divsf3_pse+0x92>
 6b0:	fe 2f       	mov	r31, r30
 6b2:	29 d0       	rcall	.+82     	; 0x706 <__divsf3_pse+0x92>
 6b4:	66 0f       	add	r22, r22
 6b6:	77 1f       	adc	r23, r23
 6b8:	88 1f       	adc	r24, r24
 6ba:	bb 1f       	adc	r27, r27
 6bc:	26 17       	cp	r18, r22
 6be:	37 07       	cpc	r19, r23
 6c0:	48 07       	cpc	r20, r24
 6c2:	ab 07       	cpc	r26, r27
 6c4:	b0 e8       	ldi	r27, 0x80	; 128
 6c6:	09 f0       	breq	.+2      	; 0x6ca <__divsf3_pse+0x56>
 6c8:	bb 0b       	sbc	r27, r27
 6ca:	80 2d       	mov	r24, r0
 6cc:	bf 01       	movw	r22, r30
 6ce:	ff 27       	eor	r31, r31
 6d0:	93 58       	subi	r25, 0x83	; 131
 6d2:	5f 4f       	sbci	r21, 0xFF	; 255
 6d4:	3a f0       	brmi	.+14     	; 0x6e4 <__divsf3_pse+0x70>
 6d6:	9e 3f       	cpi	r25, 0xFE	; 254
 6d8:	51 05       	cpc	r21, r1
 6da:	78 f0       	brcs	.+30     	; 0x6fa <__divsf3_pse+0x86>
 6dc:	0c 94 25 04 	jmp	0x84a	; 0x84a <__fp_inf>
 6e0:	0c 94 b1 04 	jmp	0x962	; 0x962 <__fp_szero>
 6e4:	5f 3f       	cpi	r21, 0xFF	; 255
 6e6:	e4 f3       	brlt	.-8      	; 0x6e0 <__divsf3_pse+0x6c>
 6e8:	98 3e       	cpi	r25, 0xE8	; 232
 6ea:	d4 f3       	brlt	.-12     	; 0x6e0 <__divsf3_pse+0x6c>
 6ec:	86 95       	lsr	r24
 6ee:	77 95       	ror	r23
 6f0:	67 95       	ror	r22
 6f2:	b7 95       	ror	r27
 6f4:	f7 95       	ror	r31
 6f6:	9f 5f       	subi	r25, 0xFF	; 255
 6f8:	c9 f7       	brne	.-14     	; 0x6ec <__divsf3_pse+0x78>
 6fa:	88 0f       	add	r24, r24
 6fc:	91 1d       	adc	r25, r1
 6fe:	96 95       	lsr	r25
 700:	87 95       	ror	r24
 702:	97 f9       	bld	r25, 7
 704:	08 95       	ret
 706:	e1 e0       	ldi	r30, 0x01	; 1
 708:	66 0f       	add	r22, r22
 70a:	77 1f       	adc	r23, r23
 70c:	88 1f       	adc	r24, r24
 70e:	bb 1f       	adc	r27, r27
 710:	62 17       	cp	r22, r18
 712:	73 07       	cpc	r23, r19
 714:	84 07       	cpc	r24, r20
 716:	ba 07       	cpc	r27, r26
 718:	20 f0       	brcs	.+8      	; 0x722 <__divsf3_pse+0xae>
 71a:	62 1b       	sub	r22, r18
 71c:	73 0b       	sbc	r23, r19
 71e:	84 0b       	sbc	r24, r20
 720:	ba 0b       	sbc	r27, r26
 722:	ee 1f       	adc	r30, r30
 724:	88 f7       	brcc	.-30     	; 0x708 <__divsf3_pse+0x94>
 726:	e0 95       	com	r30
 728:	08 95       	ret

0000072a <__fixunssfsi>:
 72a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__fp_splitA>
 72e:	88 f0       	brcs	.+34     	; 0x752 <__fixunssfsi+0x28>
 730:	9f 57       	subi	r25, 0x7F	; 127
 732:	98 f0       	brcs	.+38     	; 0x75a <__fixunssfsi+0x30>
 734:	b9 2f       	mov	r27, r25
 736:	99 27       	eor	r25, r25
 738:	b7 51       	subi	r27, 0x17	; 23
 73a:	b0 f0       	brcs	.+44     	; 0x768 <__fixunssfsi+0x3e>
 73c:	e1 f0       	breq	.+56     	; 0x776 <__fixunssfsi+0x4c>
 73e:	66 0f       	add	r22, r22
 740:	77 1f       	adc	r23, r23
 742:	88 1f       	adc	r24, r24
 744:	99 1f       	adc	r25, r25
 746:	1a f0       	brmi	.+6      	; 0x74e <__fixunssfsi+0x24>
 748:	ba 95       	dec	r27
 74a:	c9 f7       	brne	.-14     	; 0x73e <__fixunssfsi+0x14>
 74c:	14 c0       	rjmp	.+40     	; 0x776 <__fixunssfsi+0x4c>
 74e:	b1 30       	cpi	r27, 0x01	; 1
 750:	91 f0       	breq	.+36     	; 0x776 <__fixunssfsi+0x4c>
 752:	0e 94 b0 04 	call	0x960	; 0x960 <__fp_zero>
 756:	b1 e0       	ldi	r27, 0x01	; 1
 758:	08 95       	ret
 75a:	0c 94 b0 04 	jmp	0x960	; 0x960 <__fp_zero>
 75e:	67 2f       	mov	r22, r23
 760:	78 2f       	mov	r23, r24
 762:	88 27       	eor	r24, r24
 764:	b8 5f       	subi	r27, 0xF8	; 248
 766:	39 f0       	breq	.+14     	; 0x776 <__fixunssfsi+0x4c>
 768:	b9 3f       	cpi	r27, 0xF9	; 249
 76a:	cc f3       	brlt	.-14     	; 0x75e <__fixunssfsi+0x34>
 76c:	86 95       	lsr	r24
 76e:	77 95       	ror	r23
 770:	67 95       	ror	r22
 772:	b3 95       	inc	r27
 774:	d9 f7       	brne	.-10     	; 0x76c <__fixunssfsi+0x42>
 776:	3e f4       	brtc	.+14     	; 0x786 <__fixunssfsi+0x5c>
 778:	90 95       	com	r25
 77a:	80 95       	com	r24
 77c:	70 95       	com	r23
 77e:	61 95       	neg	r22
 780:	7f 4f       	sbci	r23, 0xFF	; 255
 782:	8f 4f       	sbci	r24, 0xFF	; 255
 784:	9f 4f       	sbci	r25, 0xFF	; 255
 786:	08 95       	ret

00000788 <__floatunsisf>:
 788:	e8 94       	clt
 78a:	09 c0       	rjmp	.+18     	; 0x79e <__floatsisf+0x12>

0000078c <__floatsisf>:
 78c:	97 fb       	bst	r25, 7
 78e:	3e f4       	brtc	.+14     	; 0x79e <__floatsisf+0x12>
 790:	90 95       	com	r25
 792:	80 95       	com	r24
 794:	70 95       	com	r23
 796:	61 95       	neg	r22
 798:	7f 4f       	sbci	r23, 0xFF	; 255
 79a:	8f 4f       	sbci	r24, 0xFF	; 255
 79c:	9f 4f       	sbci	r25, 0xFF	; 255
 79e:	99 23       	and	r25, r25
 7a0:	a9 f0       	breq	.+42     	; 0x7cc <__floatsisf+0x40>
 7a2:	f9 2f       	mov	r31, r25
 7a4:	96 e9       	ldi	r25, 0x96	; 150
 7a6:	bb 27       	eor	r27, r27
 7a8:	93 95       	inc	r25
 7aa:	f6 95       	lsr	r31
 7ac:	87 95       	ror	r24
 7ae:	77 95       	ror	r23
 7b0:	67 95       	ror	r22
 7b2:	b7 95       	ror	r27
 7b4:	f1 11       	cpse	r31, r1
 7b6:	f8 cf       	rjmp	.-16     	; 0x7a8 <__floatsisf+0x1c>
 7b8:	fa f4       	brpl	.+62     	; 0x7f8 <__floatsisf+0x6c>
 7ba:	bb 0f       	add	r27, r27
 7bc:	11 f4       	brne	.+4      	; 0x7c2 <__floatsisf+0x36>
 7be:	60 ff       	sbrs	r22, 0
 7c0:	1b c0       	rjmp	.+54     	; 0x7f8 <__floatsisf+0x6c>
 7c2:	6f 5f       	subi	r22, 0xFF	; 255
 7c4:	7f 4f       	sbci	r23, 0xFF	; 255
 7c6:	8f 4f       	sbci	r24, 0xFF	; 255
 7c8:	9f 4f       	sbci	r25, 0xFF	; 255
 7ca:	16 c0       	rjmp	.+44     	; 0x7f8 <__floatsisf+0x6c>
 7cc:	88 23       	and	r24, r24
 7ce:	11 f0       	breq	.+4      	; 0x7d4 <__floatsisf+0x48>
 7d0:	96 e9       	ldi	r25, 0x96	; 150
 7d2:	11 c0       	rjmp	.+34     	; 0x7f6 <__floatsisf+0x6a>
 7d4:	77 23       	and	r23, r23
 7d6:	21 f0       	breq	.+8      	; 0x7e0 <__floatsisf+0x54>
 7d8:	9e e8       	ldi	r25, 0x8E	; 142
 7da:	87 2f       	mov	r24, r23
 7dc:	76 2f       	mov	r23, r22
 7de:	05 c0       	rjmp	.+10     	; 0x7ea <__floatsisf+0x5e>
 7e0:	66 23       	and	r22, r22
 7e2:	71 f0       	breq	.+28     	; 0x800 <__DATA_REGION_LENGTH__>
 7e4:	96 e8       	ldi	r25, 0x86	; 134
 7e6:	86 2f       	mov	r24, r22
 7e8:	70 e0       	ldi	r23, 0x00	; 0
 7ea:	60 e0       	ldi	r22, 0x00	; 0
 7ec:	2a f0       	brmi	.+10     	; 0x7f8 <__floatsisf+0x6c>
 7ee:	9a 95       	dec	r25
 7f0:	66 0f       	add	r22, r22
 7f2:	77 1f       	adc	r23, r23
 7f4:	88 1f       	adc	r24, r24
 7f6:	da f7       	brpl	.-10     	; 0x7ee <__floatsisf+0x62>
 7f8:	88 0f       	add	r24, r24
 7fa:	96 95       	lsr	r25
 7fc:	87 95       	ror	r24
 7fe:	97 f9       	bld	r25, 7
 800:	08 95       	ret

00000802 <__fp_cmp>:
 802:	99 0f       	add	r25, r25
 804:	00 08       	sbc	r0, r0
 806:	55 0f       	add	r21, r21
 808:	aa 0b       	sbc	r26, r26
 80a:	e0 e8       	ldi	r30, 0x80	; 128
 80c:	fe ef       	ldi	r31, 0xFE	; 254
 80e:	16 16       	cp	r1, r22
 810:	17 06       	cpc	r1, r23
 812:	e8 07       	cpc	r30, r24
 814:	f9 07       	cpc	r31, r25
 816:	c0 f0       	brcs	.+48     	; 0x848 <__fp_cmp+0x46>
 818:	12 16       	cp	r1, r18
 81a:	13 06       	cpc	r1, r19
 81c:	e4 07       	cpc	r30, r20
 81e:	f5 07       	cpc	r31, r21
 820:	98 f0       	brcs	.+38     	; 0x848 <__fp_cmp+0x46>
 822:	62 1b       	sub	r22, r18
 824:	73 0b       	sbc	r23, r19
 826:	84 0b       	sbc	r24, r20
 828:	95 0b       	sbc	r25, r21
 82a:	39 f4       	brne	.+14     	; 0x83a <__fp_cmp+0x38>
 82c:	0a 26       	eor	r0, r26
 82e:	61 f0       	breq	.+24     	; 0x848 <__fp_cmp+0x46>
 830:	23 2b       	or	r18, r19
 832:	24 2b       	or	r18, r20
 834:	25 2b       	or	r18, r21
 836:	21 f4       	brne	.+8      	; 0x840 <__fp_cmp+0x3e>
 838:	08 95       	ret
 83a:	0a 26       	eor	r0, r26
 83c:	09 f4       	brne	.+2      	; 0x840 <__fp_cmp+0x3e>
 83e:	a1 40       	sbci	r26, 0x01	; 1
 840:	a6 95       	lsr	r26
 842:	8f ef       	ldi	r24, 0xFF	; 255
 844:	81 1d       	adc	r24, r1
 846:	81 1d       	adc	r24, r1
 848:	08 95       	ret

0000084a <__fp_inf>:
 84a:	97 f9       	bld	r25, 7
 84c:	9f 67       	ori	r25, 0x7F	; 127
 84e:	80 e8       	ldi	r24, 0x80	; 128
 850:	70 e0       	ldi	r23, 0x00	; 0
 852:	60 e0       	ldi	r22, 0x00	; 0
 854:	08 95       	ret

00000856 <__fp_mintl>:
 856:	88 23       	and	r24, r24
 858:	71 f4       	brne	.+28     	; 0x876 <__stack+0x17>
 85a:	77 23       	and	r23, r23
 85c:	21 f0       	breq	.+8      	; 0x866 <__stack+0x7>
 85e:	98 50       	subi	r25, 0x08	; 8
 860:	87 2b       	or	r24, r23
 862:	76 2f       	mov	r23, r22
 864:	07 c0       	rjmp	.+14     	; 0x874 <__stack+0x15>
 866:	66 23       	and	r22, r22
 868:	11 f4       	brne	.+4      	; 0x86e <__stack+0xf>
 86a:	99 27       	eor	r25, r25
 86c:	0d c0       	rjmp	.+26     	; 0x888 <__stack+0x29>
 86e:	90 51       	subi	r25, 0x10	; 16
 870:	86 2b       	or	r24, r22
 872:	70 e0       	ldi	r23, 0x00	; 0
 874:	60 e0       	ldi	r22, 0x00	; 0
 876:	2a f0       	brmi	.+10     	; 0x882 <__stack+0x23>
 878:	9a 95       	dec	r25
 87a:	66 0f       	add	r22, r22
 87c:	77 1f       	adc	r23, r23
 87e:	88 1f       	adc	r24, r24
 880:	da f7       	brpl	.-10     	; 0x878 <__stack+0x19>
 882:	88 0f       	add	r24, r24
 884:	96 95       	lsr	r25
 886:	87 95       	ror	r24
 888:	97 f9       	bld	r25, 7
 88a:	08 95       	ret

0000088c <__fp_mpack>:
 88c:	9f 3f       	cpi	r25, 0xFF	; 255
 88e:	31 f0       	breq	.+12     	; 0x89c <__fp_mpack_finite+0xc>

00000890 <__fp_mpack_finite>:
 890:	91 50       	subi	r25, 0x01	; 1
 892:	20 f4       	brcc	.+8      	; 0x89c <__fp_mpack_finite+0xc>
 894:	87 95       	ror	r24
 896:	77 95       	ror	r23
 898:	67 95       	ror	r22
 89a:	b7 95       	ror	r27
 89c:	88 0f       	add	r24, r24
 89e:	91 1d       	adc	r25, r1
 8a0:	96 95       	lsr	r25
 8a2:	87 95       	ror	r24
 8a4:	97 f9       	bld	r25, 7
 8a6:	08 95       	ret

000008a8 <__fp_nan>:
 8a8:	9f ef       	ldi	r25, 0xFF	; 255
 8aa:	80 ec       	ldi	r24, 0xC0	; 192
 8ac:	08 95       	ret

000008ae <__fp_pscA>:
 8ae:	00 24       	eor	r0, r0
 8b0:	0a 94       	dec	r0
 8b2:	16 16       	cp	r1, r22
 8b4:	17 06       	cpc	r1, r23
 8b6:	18 06       	cpc	r1, r24
 8b8:	09 06       	cpc	r0, r25
 8ba:	08 95       	ret

000008bc <__fp_pscB>:
 8bc:	00 24       	eor	r0, r0
 8be:	0a 94       	dec	r0
 8c0:	12 16       	cp	r1, r18
 8c2:	13 06       	cpc	r1, r19
 8c4:	14 06       	cpc	r1, r20
 8c6:	05 06       	cpc	r0, r21
 8c8:	08 95       	ret

000008ca <__fp_round>:
 8ca:	09 2e       	mov	r0, r25
 8cc:	03 94       	inc	r0
 8ce:	00 0c       	add	r0, r0
 8d0:	11 f4       	brne	.+4      	; 0x8d6 <__fp_round+0xc>
 8d2:	88 23       	and	r24, r24
 8d4:	52 f0       	brmi	.+20     	; 0x8ea <__fp_round+0x20>
 8d6:	bb 0f       	add	r27, r27
 8d8:	40 f4       	brcc	.+16     	; 0x8ea <__fp_round+0x20>
 8da:	bf 2b       	or	r27, r31
 8dc:	11 f4       	brne	.+4      	; 0x8e2 <__fp_round+0x18>
 8de:	60 ff       	sbrs	r22, 0
 8e0:	04 c0       	rjmp	.+8      	; 0x8ea <__fp_round+0x20>
 8e2:	6f 5f       	subi	r22, 0xFF	; 255
 8e4:	7f 4f       	sbci	r23, 0xFF	; 255
 8e6:	8f 4f       	sbci	r24, 0xFF	; 255
 8e8:	9f 4f       	sbci	r25, 0xFF	; 255
 8ea:	08 95       	ret

000008ec <__fp_split3>:
 8ec:	57 fd       	sbrc	r21, 7
 8ee:	90 58       	subi	r25, 0x80	; 128
 8f0:	44 0f       	add	r20, r20
 8f2:	55 1f       	adc	r21, r21
 8f4:	59 f0       	breq	.+22     	; 0x90c <__fp_splitA+0x10>
 8f6:	5f 3f       	cpi	r21, 0xFF	; 255
 8f8:	71 f0       	breq	.+28     	; 0x916 <__fp_splitA+0x1a>
 8fa:	47 95       	ror	r20

000008fc <__fp_splitA>:
 8fc:	88 0f       	add	r24, r24
 8fe:	97 fb       	bst	r25, 7
 900:	99 1f       	adc	r25, r25
 902:	61 f0       	breq	.+24     	; 0x91c <__fp_splitA+0x20>
 904:	9f 3f       	cpi	r25, 0xFF	; 255
 906:	79 f0       	breq	.+30     	; 0x926 <__fp_splitA+0x2a>
 908:	87 95       	ror	r24
 90a:	08 95       	ret
 90c:	12 16       	cp	r1, r18
 90e:	13 06       	cpc	r1, r19
 910:	14 06       	cpc	r1, r20
 912:	55 1f       	adc	r21, r21
 914:	f2 cf       	rjmp	.-28     	; 0x8fa <__fp_split3+0xe>
 916:	46 95       	lsr	r20
 918:	f1 df       	rcall	.-30     	; 0x8fc <__fp_splitA>
 91a:	08 c0       	rjmp	.+16     	; 0x92c <__fp_splitA+0x30>
 91c:	16 16       	cp	r1, r22
 91e:	17 06       	cpc	r1, r23
 920:	18 06       	cpc	r1, r24
 922:	99 1f       	adc	r25, r25
 924:	f1 cf       	rjmp	.-30     	; 0x908 <__fp_splitA+0xc>
 926:	86 95       	lsr	r24
 928:	71 05       	cpc	r23, r1
 92a:	61 05       	cpc	r22, r1
 92c:	08 94       	sec
 92e:	08 95       	ret

00000930 <__fp_trunc>:
 930:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__fp_splitA>
 934:	a0 f0       	brcs	.+40     	; 0x95e <__fp_trunc+0x2e>
 936:	be e7       	ldi	r27, 0x7E	; 126
 938:	b9 17       	cp	r27, r25
 93a:	88 f4       	brcc	.+34     	; 0x95e <__fp_trunc+0x2e>
 93c:	bb 27       	eor	r27, r27
 93e:	9f 38       	cpi	r25, 0x8F	; 143
 940:	60 f4       	brcc	.+24     	; 0x95a <__fp_trunc+0x2a>
 942:	16 16       	cp	r1, r22
 944:	b1 1d       	adc	r27, r1
 946:	67 2f       	mov	r22, r23
 948:	78 2f       	mov	r23, r24
 94a:	88 27       	eor	r24, r24
 94c:	98 5f       	subi	r25, 0xF8	; 248
 94e:	f7 cf       	rjmp	.-18     	; 0x93e <__fp_trunc+0xe>
 950:	86 95       	lsr	r24
 952:	77 95       	ror	r23
 954:	67 95       	ror	r22
 956:	b1 1d       	adc	r27, r1
 958:	93 95       	inc	r25
 95a:	96 39       	cpi	r25, 0x96	; 150
 95c:	c8 f3       	brcs	.-14     	; 0x950 <__fp_trunc+0x20>
 95e:	08 95       	ret

00000960 <__fp_zero>:
 960:	e8 94       	clt

00000962 <__fp_szero>:
 962:	bb 27       	eor	r27, r27
 964:	66 27       	eor	r22, r22
 966:	77 27       	eor	r23, r23
 968:	cb 01       	movw	r24, r22
 96a:	97 f9       	bld	r25, 7
 96c:	08 95       	ret

0000096e <_exit>:
 96e:	f8 94       	cli

00000970 <__stop_program>:
 970:	ff cf       	rjmp	.-2      	; 0x970 <__stop_program>
